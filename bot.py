# -----------------------------------
# –ò–ú–ü–û–†–¢–´
# -----------------------------------
import asyncio
import os
import httpx
import jwt
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
)
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# --- –Ω–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π ---
import json
from pathlib import Path
import stat

# -----------------------------------
# –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–ê
# -----------------------------------
env_path = os.path.join(os.path.dirname(__file__), "config.env")
print(f"DEBUG: config.env path = {env_path}")
load_dotenv(env_path)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# -----------------------------------
# –ò–∑–º–µ–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ IP!!! /api –Ω–µ –∏–∑–º–µ–Ω—è–π—Ç–µ
# -----------------------------------
API_BASE = "https://0.0.0.0/api"

# -----------------------------------
# –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–û–í
# -----------------------------------
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å config.env"))
ADMINS_CHAT_ID = int(os.getenv("ADMINS_CHAT_ID", "—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å config.env"))
ADMIN_NICKS = json.loads(os.getenv("ADMIN_NICKS", '—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å config.env'))

sessions = {}
admin_token = None

# -----------------------------------
# –§–ê–ô–õ –°–ï–°–°–ò–ô –ò –ê–ö–¢–ò–í–ù–´–• –ß–ê–¢–û–í
# -----------------------------------
SESSIONS_FILE = Path(__file__).with_name("sessions.json")
ACTIVE_CHATS_FILE = Path(__file__).with_name("active_chats.json")
ADMINS_FILE = Path(__file__).with_name("admins.json")

def load_sessions():
    global sessions
    try:
        if SESSIONS_FILE.exists():
            with SESSIONS_FILE.open("r", encoding="utf-8") as f:
                raw = json.load(f)
            sessions = {int(k): v for k, v in raw.items()}
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(sessions)} —Å–µ—Å—Å–∏–π –∏–∑ {SESSIONS_FILE}")
        else:
            sessions = {}
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {SESSIONS_FILE}: {e}")
        sessions = {}

def save_sessions():
    try:
        tmp = SESSIONS_FILE.with_suffix(".tmp")
        data_to_write = {str(k): v for k, v in sessions.items()}
        with tmp.open("w", encoding="utf-8") as f:
            json.dump(data_to_write, f, ensure_ascii=False, indent=2)
        tmp.replace(SESSIONS_FILE)
        try:
            SESSIONS_FILE.chmod(stat.S_IRUSR | stat.S_IWUSR)
        except Exception:
            pass
        print(f"‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {SESSIONS_FILE}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏–∏: {e}")

def load_active_chats():
    try:
        if ACTIVE_CHATS_FILE.exists():
            with ACTIVE_CHATS_FILE.open("r", encoding="utf-8") as f:
                return json.load(f)
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {e}")
        return {}

def save_active_chats(active_chats):
    try:
        tmp = ACTIVE_CHATS_FILE.with_suffix(".tmp")
        with tmp.open("w", encoding="utf-8") as f:
            json.dump(active_chats, f, ensure_ascii=False, indent=2)
        tmp.replace(ACTIVE_CHATS_FILE)
        try:
            ACTIVE_CHATS_FILE.chmod(stat.S_IRUSR | stat.S_IWUSR)
        except Exception:
            pass
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {e}")

def load_admins():
    try:
        if ADMINS_FILE.exists():
            with ADMINS_FILE.open("r", encoding="utf-8") as f:
                admins_data = json.load(f)
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∞–¥–º–∏–Ω–∞–º–∏ –∏–∑ config.env (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ñ–∞–π–ª–∞ admins.json)
            merged_admins = {**ADMIN_NICKS, **admins_data}
            return merged_admins
        return ADMIN_NICKS
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return ADMIN_NICKS

def save_admins(admins_dict):
    try:
        tmp = ADMINS_FILE.with_suffix(".tmp")
        with tmp.open("w", encoding="utf-8") as f:
            json.dump(admins_dict, f, ensure_ascii=False, indent=2)
        tmp.replace(ADMINS_FILE)
        try:
            ADMINS_FILE.chmod(stat.S_IRUSR | stat.S_IWUSR)
        except Exception:
            pass
        print(f"‚úÖ –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

# -----------------------------------
# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —Å—Å—ã–ª–∫–∏ –∏–∑ config.env
# -----------------------------------
CLUB_LAT = os.getenv("CLUB_LAT")
CLUB_LON = os.getenv("CLUB_LON")
VK_GROUP_URL = os.getenv("VK_GROUP_URL")

user_messages = {}
active_chats = load_active_chats()
ADMIN_NICKS = load_admins()

# -----------------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–û–í
# -----------------------------------
def is_admin(user_id: int) -> bool:
    return str(user_id) in ADMIN_NICKS

def get_admin_menu():
    kb = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?")],
        [KeyboardButton(text="üñ• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ü–ö")],
        [KeyboardButton(text="üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
        [KeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

# -----------------------------------
# –ö–ù–û–ü–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ + –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –° admins
# -----------------------------------
def menu():
    kb = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?")],
        [KeyboardButton(text="üñ• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ü–ö")],
        [KeyboardButton(text="üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def admin_chat_menu(user_id):
    kb = [
        [InlineKeyboardButton(text="üì® –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_to:{user_id}")],
        [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data=f"close_chat:{user_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def user_chat_menu():
    kb = [
        [InlineKeyboardButton(text="üîí –ó–∞–∫—Ä—ã—Ç—å —á–∞—Ç", callback_data="close_chat_user")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def admin_management_menu():
    kb = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="add_admin")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="remove_admin")],
        [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="list_admins")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# -----------------------------------
# –£–î–ê–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
# -----------------------------------
async def cleanup_messages(m: Message):
    uid = m.from_user.id
    try:
        await m.delete()
    except Exception:
        pass
    if uid in user_messages:
        for msg_id in user_messages[uid]:
            try:
                await m.bot.delete_message(chat_id=uid, message_id=msg_id)
            except Exception:
                pass
        user_messages[uid] = []

# -----------------------------------
# –õ–û–ì–ò–ù –ê–î–ú–ò–ù–ê
# -----------------------------------
async def login_admin():
    global admin_token
    url = f"{API_BASE}/v2.0/auth/accesstoken?Username=admin&Password=admin"
    async with httpx.AsyncClient(verify=False) as client:
        r = await client.get(url)
        if r.status_code == 200:
            data = r.json()
            admin_token = data["result"]["token"]
            print("‚úÖ –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            return True
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞")
        return False

# -----------------------------------
# –õ–û–ì–ò–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# -----------------------------------
async def login_client(tg_id: int, username: str, password: str):
    url = f"{API_BASE}/user/v2.0/auth/accesstoken?Username={username}&Password={password}"
    async with httpx.AsyncClient(verify=False) as client:
        r = await client.get(url)
        if r.status_code == 200:
            data = r.json()
            token = data["result"]["token"]
            payload = jwt.decode(token, options={"verify_signature": False})
            user_id = payload.get("nameid")
            sessions[tg_id] = {
                "token": token,
                "user_id": user_id,
                "login": username,
                "password": password
            }
            save_sessions()
            return True
        return False

# -----------------------------------
# –ü–†–û–§–ò–õ–¨
# -----------------------------------
async def get_profile(tg_id: int):
    user_data = sessions.get(tg_id)
    if not user_data:
        return None
    url = f"{API_BASE}/v2.0/users/{user_data['user_id']}"
    headers = {"Authorization": f"Bearer {admin_token}"}
    async with httpx.AsyncClient(verify=False) as client:
        r = await client.get(url, headers=headers)
        if r.status_code == 200:
            return r.json()["result"]
    return None

# -----------------------------------
# –ë–ê–õ–ê–ù–°
# -----------------------------------
async def get_balance(tg_id: int):
    user_data = sessions.get(tg_id)
    if not user_data:
        return None
    url = f"{API_BASE}/users/{user_data['user_id']}/balance"
    headers = {"Authorization": f"Bearer {admin_token}"}
    async with httpx.AsyncClient(verify=False) as client:
        r = await client.get(url, headers=headers)
        if r.status_code == 200:
            return r.json()["result"]
    return None

# -----------------------------------
# –î–û–°–¢–£–ü–ù–´–ï –ü–ö (–ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê)
# -----------------------------------
async def get_available_hosts():
    headers = {"Authorization": f"Bearer {admin_token}"}
    async with httpx.AsyncClient(verify=False) as client:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        active_resp = await client.get(f"{API_BASE}/usersessions/activeinfo", headers=headers)
        active_hosts = set()
        if active_resp.status_code == 200:
            active_data = active_resp.json().get("result", [])
            active_hosts = {s["hostId"] for s in active_data if s.get("hostId")}

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ü–ö
        hosts_resp = await client.get(f"{API_BASE}/hosts", headers=headers)
        if hosts_resp.status_code != 200:
            return []

        hosts = hosts_resp.json().get("result", [])
        available = []

        for h in hosts:
            if not h.get("isDeleted") and h.get("id") not in active_hosts:
                available.append(h)

        return available

# -----------------------------------
# –õ–û–ì–ò–ù –ù–ê –ü–ö
# -----------------------------------
async def login_to_host(tg_id: int, host_id: int):
    user_data = sessions.get(tg_id)
    if not user_data:
        return False, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É"
    user_id = user_data["user_id"]
    headers = {"Authorization": f"Bearer {admin_token}"}
    async with httpx.AsyncClient(verify=False) as client:
        # –ª–æ–≥–∏–Ω
        url_login = f"{API_BASE}/users/{user_id}/login/{host_id}"
        r1 = await client.post(url_login, headers=headers)
        if r1.status_code != 200:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –Ω–∞ –ü–ö"
        # unlock
        url_unlock = f"{API_BASE}/hosts/{host_id}/lock/false"
        r2 = await client.post(url_unlock, headers=headers)
        if r2.status_code != 200:
            return False, "‚ö†Ô∏è –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É"
    return True, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥"

# -----------------------------------
# FSM
# -----------------------------------
class AuthState(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

class ChatState(StatesGroup):
    waiting_for_user_message = State()
    waiting_for_admin_reply = State()

class AdminManagementState(StatesGroup):
    waiting_for_admin_id = State()
    waiting_for_admin_name = State()
    waiting_for_admin_remove = State()

dp = Dispatcher(storage=MemoryStorage())

# -----------------------------------
# START –ò –§–£–ù–ö–¶–ò–Ø –õ–û–ì–ò–ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–û –î–ê–ù–ù–´–ú GIZMO
# -----------------------------------
@dp.message(F.text == "/start")
async def start_cmd(m: Message, state: FSMContext):
    await cleanup_messages(m)
    await state.set_state(AuthState.waiting_for_login)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_admin(m.from_user.id):
        menu_markup = get_admin_menu()
    else:
        menu_markup = menu()
    
    msg = await m.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!\n–î–∞–Ω–Ω—ã–π –±–æ—Ç –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞, –ø—Ä–æ—Ñ–∏–ª—è –≤ –∫–ª—É–±–µ, –∞ —Ç–∞–∫-–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ –ü–ö.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:", reply_markup=menu_markup)
    user_messages[m.from_user.id] = [msg.message_id]

@dp.message(AuthState.waiting_for_login)
async def process_login(m: Message, state: FSMContext):
    await cleanup_messages(m)
    await state.update_data(login=m.text)
    await state.set_state(AuthState.waiting_for_password)
    msg = await m.answer("üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    user_messages[m.from_user.id] = [msg.message_id]

@dp.message(AuthState.waiting_for_password)
async def process_password(m: Message, state: FSMContext):
    await cleanup_messages(m)
    data = await state.get_data()
    login = data["login"]
    password = m.text
    if await login_client(m.from_user.id, login, password):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_admin(m.from_user.id):
            menu_markup = get_admin_menu()
        else:
            menu_markup = menu()
            
        msg = await m.answer("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!", reply_markup=menu_markup)
        user_messages[m.from_user.id] = [msg.message_id]
        await state.clear()
    else:
        msg = await m.answer("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –∞ –ø–æ—Ç–æ–º –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
        user_messages[m.from_user.id] = [msg.message_id]
        await state.clear()

# -----------------------------------
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú–ò
# -----------------------------------
@dp.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def admin_management(m: Message):
    if not is_admin(m.from_user.id):
        await m.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ä–∞–∑–¥–µ–ª—É")
        return
    
    await cleanup_messages(m)
    msg = await m.answer("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:", reply_markup=admin_management_menu())
    user_messages[m.from_user.id] = [msg.message_id]

@dp.callback_query(F.data == "add_admin")
async def add_admin_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    await state.set_state(AdminManagementState.waiting_for_admin_id)
    await c.message.answer("üë§ –í–≤–µ–¥–∏—Ç–µ Telegram ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    await c.answer()

@dp.message(AdminManagementState.waiting_for_admin_id)
async def process_admin_id(m: Message, state: FSMContext):
    try:
        admin_id = int(m.text.strip())
        await state.update_data(admin_id=admin_id)
        await state.set_state(AdminManagementState.waiting_for_admin_name)
        await m.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    except ValueError:
        await m.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID:")

@dp.message(AdminManagementState.waiting_for_admin_name)
async def process_admin_name(m: Message, state: FSMContext):
    data = await state.get_data()
    admin_id = data['admin_id']
    admin_name = m.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    ADMIN_NICKS[str(admin_id)] = admin_name
    save_admins(ADMIN_NICKS)
    
    await m.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\nID: {admin_id}\n–ò–º—è: {admin_name}")
    await state.clear()

@dp.callback_query(F.data == "remove_admin")
async def remove_admin_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    if len(ADMIN_NICKS) <= 1:
        await c.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{name} (ID: {id})", callback_data=f"remove_admin_confirm:{id}")] 
        for id, name in ADMIN_NICKS.items() if int(id) != c.from_user.id
    ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_remove")]])
    
    await c.message.answer("üóë –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await c.answer()

@dp.callback_query(F.data.startswith("remove_admin_confirm:"))
async def remove_admin_confirm(c: CallbackQuery):
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    admin_id = c.data.split(":")[1]
    admin_name = ADMIN_NICKS.get(admin_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
    if int(admin_id) == c.from_user.id:
        await c.answer("‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    del ADMIN_NICKS[admin_id]
    save_admins(ADMIN_NICKS)
    
    await c.message.edit_text(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω:\nID: {admin_id}\n–ò–º—è: {admin_name}")
    await c.answer()

@dp.callback_query(F.data == "cancel_remove")
async def cancel_remove(c: CallbackQuery):
    await c.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await c.answer()

@dp.callback_query(F.data == "list_admins")
async def list_admins(c: CallbackQuery):
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏", show_alert=True)
        return
    
    admins_list = "üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin_id, admin_name in ADMIN_NICKS.items():
        admins_list += f"üë§ {admin_name} (ID: {admin_id})\n"
    
    await c.message.answer(admins_list)
    await c.answer()

@dp.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(c: CallbackQuery):
    try:
        await c.message.delete()
    except Exception:
        pass
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_admin(c.from_user.id):
        menu_markup = get_admin_menu()
    else:
        menu_markup = menu()
    await c.message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é", reply_markup=menu_markup)
    await c.answer()

# -----------------------------------
# –ß–ê–¢ –° –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–ú \ –§–£–ù–ö–¶–ò–ò –ß–ê–¢–û–í \ –ü–†–ò–í–Ø–ó–ö–ê –°–ï–¢–ö–ò
# -----------------------------------
@dp.message(F.text == "üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def start_admin_chat(m: Message, state: FSMContext):
    await cleanup_messages(m)
    user_id = m.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    profile_data = await get_profile(user_id)
    username = profile_data.get('username', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if profile_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    first_name = profile_data.get('firstName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if profile_data else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    active_chats[str(user_id)] = {
        "username": username,
        "first_name": first_name,
        "active": True
    }
    save_active_chats(active_chats)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_message = f"üë§ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\nID: {user_id}\n–ò–º—è: {first_name}\n–ù–∏–∫: {username}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:"
    await m.bot.send_message(
        ADMINS_CHAT_ID, 
        admin_message,
        reply_markup=admin_chat_menu(user_id)
    )
    
    msg = await m.answer(
        "üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ.",
        reply_markup=user_chat_menu()
    )
    user_messages[user_id] = [msg.message_id]
    await state.set_state(ChatState.waiting_for_user_message)

@dp.message(ChatState.waiting_for_user_message)
async def process_user_message(m: Message, state: FSMContext):
    user_id = m.from_user.id
    
    if not active_chats.get(str(user_id), {}).get("active", False):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_admin(m.from_user.id):
            menu_markup = get_admin_menu()
        else:
            menu_markup = menu()
        await m.answer("‚ùå –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç. –ù–∞–∂–º–∏—Ç–µ 'üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=menu_markup)
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if m.text:
        admin_message = f"üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {m.from_user.first_name} (ID: {user_id}):\n\n{m.text}"
        await m.bot.send_message(
            ADMINS_CHAT_ID, 
            admin_message,
            reply_markup=admin_chat_menu(user_id)
        )
        await m.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=user_chat_menu())
    
    elif m.photo:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        caption = f"üë§ –§–æ—Ç–æ –æ—Ç {m.from_user.first_name} (ID: {user_id})"
        if m.caption:
            caption += f"\n\n–ü–æ–¥–ø–∏—Å—å: {m.caption}"
            
        await m.bot.send_photo(
            ADMINS_CHAT_ID,
            m.photo[-1].file_id,
            caption=caption,
            reply_markup=admin_chat_menu(user_id)
        )
        await m.answer("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=user_chat_menu())

@dp.callback_query(F.data.startswith("reply_to:"))
async def start_admin_reply(c: CallbackQuery, state: FSMContext):
    user_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞", show_alert=True)
        return
    
    await state.update_data(reply_to_user=user_id)
    await state.set_state(ChatState.waiting_for_admin_reply)
    
    await c.message.answer(f"üí¨ –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {user_id}):")
    await c.answer()

@dp.message(ChatState.waiting_for_admin_reply)
async def process_admin_reply(m: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('reply_to_user')
    
    if not user_id:
        await m.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_name = ADMIN_NICKS.get(str(m.from_user.id), "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await m.bot.send_message(
            user_id,
            f"üíå –û—Ç–≤–µ—Ç –æ—Ç {admin_name}:\n\n{m.text}\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            reply_markup=user_chat_menu()
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await m.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        active_chats[str(user_id)] = {
            **active_chats.get(str(user_id), {}),
            "active": True
        }
        save_active_chats(active_chats)
        
    except Exception as e:
        await m.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
    
    await state.clear()

# -----------------------------------
# –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø –ß–ê–¢–ê –ê–î–ú–ò–ù–û–ú
# -----------------------------------

@dp.callback_query(F.data.startswith("close_chat:"))
async def close_chat_by_admin(c: CallbackQuery):
    user_id = int(c.data.split(":")[1])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(c.from_user.id):
        await c.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —á–∞—Ç–∞", show_alert=True)
        return
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
    if str(user_id) in active_chats:
        active_chats[str(user_id)]["active"] = False
        save_active_chats(active_chats)
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await c.bot.send_message(
            user_id,
            "üîí –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —á–∞—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
            "–Ω–∞–∂–º–∏—Ç–µ 'üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç.",
            reply_markup=menu()
        )
    except Exception:
        pass
    
    await c.message.edit_text(f"‚úÖ –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∑–∞–∫—Ä—ã—Ç")
    await c.answer()

# -----------------------------------
# –§–£–ù–ö–¶–ò–Ø –ó–ê–ö–†–´–¢–ò–Ø –ß–ê–¢–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
# -----------------------------------
@dp.callback_query(F.data == "close_chat_user")
async def close_chat_by_user(c: CallbackQuery, state: FSMContext):
    user_id = c.from_user.id
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
    if str(user_id) in active_chats:
        active_chats[str(user_id)]["active"] = False
        save_active_chats(active_chats)
    
    await c.message.edit_text(
        "üîí –í—ã –∑–∞–∫—Ä—ã–ª–∏ —á–∞—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, "
        "–Ω–∞–∂–º–∏—Ç–µ 'üí¨ –ß–∞—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç."
    )
    await c.answer()
    await state.clear()

# -----------------------------------
# –ö–ù–û–ü–ö–ò
# -----------------------------------
@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(m: Message):
    await cleanup_messages(m)
    data = await get_profile(m.from_user.id)
    if data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_admin(m.from_user.id):
            menu_markup = get_admin_menu()
        else:
            menu_markup = menu()
            
        msg = await m.answer(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['mobilePhone']}\n"
            f"–ù–∏–∫: {data['username']}\n–ò–º—è: {data.get('firstName')}",
            reply_markup=menu_markup
        )
    else:
        msg = await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=menu())
    user_messages[m.from_user.id] = [msg.message_id]

@dp.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance(m: Message):
    await cleanup_messages(m)
    data = await get_balance(m.from_user.id)
    if data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if is_admin(m.from_user.id):
            menu_markup = get_admin_menu()
        else:
            menu_markup = menu()
            
        deposits = data.get("deposits", 0)
        points = data.get("points", 0)
        msg = await m.answer(
            f"üí∞ –ë–∞–ª–∞–Ω—Å\n–î–µ–ø–æ–∑–∏—Ç: {deposits} ‚ÇΩ\n–ë–∞–ª–ª—ã: {points}",
            reply_markup=menu_markup
        )
    else:
        msg = await m.answer("‚ùå –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=menu())
    user_messages[m.from_user.id] = [msg.message_id]

@dp.message(F.text == "üìç –ì–¥–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è?")
async def club_location(m: Message):
    await cleanup_messages(m)
    uid = m.from_user.id
    user_messages[uid] = []
    loc_msg = await m.answer_location(latitude=float(CLUB_LAT), longitude=float(CLUB_LON))
    user_messages[uid].append(loc_msg.message_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_admin(m.from_user.id):
        menu_markup = get_admin_menu()
    else:
        menu_markup = menu()
        
    txt_msg = await m.answer("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –∑–¥–µ—Å—å üëá", reply_markup=menu_markup)
    user_messages[uid].append(txt_msg.message_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üó∫ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã",
            url=f"https://yandex.ru/maps/?pt={CLUB_LON},{CLUB_LAT}&z=17&l=map"
        )],
        [InlineKeyboardButton(
            text="üìç 2–ì–ò–°",
            url=f"https://2gis.ru/search/{CLUB_LAT}%2C{CLUB_LON}/zoom/17"
        )],
        [InlineKeyboardButton(
            text="üîó –ì—Ä—É–ø–ø–∞ –í–ö",
            url=VK_GROUP_URL
        )]
    ])
    kb_msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
    user_messages[uid].append(kb_msg.message_id)

@dp.message(F.text == "üñ• –î–æ—Å—Ç—É–ø–Ω—ã–µ –ü–ö")
async def available_pcs(m: Message):
    await cleanup_messages(m)
    hosts = await get_available_hosts()
    if hosts:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=h["name"], callback_data=f"login_host:{h['id']}")] for h in hosts
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]])
        msg = await m.answer("üñ• –í—ã–±–µ—Ä–∏—Ç–µ –ü–ö –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=kb)
    else:
        msg = await m.answer("‚ùå –°–≤–æ–±–æ–¥–Ω—ã—Ö –ü–ö –Ω–µ—Ç", reply_markup=menu())
    user_messages[m.from_user.id] = [msg.message_id]

@dp.callback_query(F.data.startswith("login_host:"))
async def cb_login_host(c: CallbackQuery):
    host_id = int(c.data.split(":")[1])
    ok, text = await login_to_host(c.from_user.id, host_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if is_admin(c.from_user.id):
        menu_markup = get_admin_menu()
    else:
        menu_markup = menu()
        
    await c.message.answer(text, reply_markup=menu_markup)
    await c.answer()

# -----------------------------------
# MAIN
# -----------------------------------
async def main():
    load_sessions()
    await login_admin()
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())